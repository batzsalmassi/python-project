name: "Terraform Plan"

on:
  pull_request:
    paths:
      - 'app/**' 
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}

jobs:
  terraform:
    if: github.repository == 'batzsalmassi/python-project'
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.2

      - name: Terraform init
        id: init
        working-directory: ./main
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform format check
        id: fmt-check
        working-directory: ./main
        run: terraform fmt -check
        continue-on-error: true  # Allow the workflow to proceed even if this fails

      - name: Automatically format Terraform code if not formatted
        if: steps.fmt-check.outcome == 'failure'  # Only run if the format check fails
        working-directory: ./main
        run: terraform fmt

      - name: Commit formatted code
        if: steps.fmt-check.outcome == 'failure'  # Only commit if the format check fails
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Automatically formatted Terraform code"
          git push

      - name: Terraform plan
        id: plan
        working-directory: ./main
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Post Plan Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt-check.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
