name: "Terraform Plan"

on:
  push:
    paths:
      - 'main/**'  # Trigger on any push to files under the 'main/' directory
  pull_request:
    paths:
      - 'main/**'  # Trigger on any pull request that modifies files under the 'main/' directory
  workflow_dispatch:  # Allows manual triggering of the workflow

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Access key for AWS
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Secret key for AWS
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}  # S3 bucket name for Terraform state
  AWS_REGION: ${{ secrets.BACKEND_REGION }}  # AWS region (e.g., us-east-1)
  SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}  # Shodan API key

jobs:
  terraform:
    if: github.repository == 'batzsalmassi/python-project'
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required permissions for committing code
      pull-requests: write  # Required permissions for commenting on pull requests
      actions: write  # Required permissions for triggering actions

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}  # Checkout the branch that triggered the workflow

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.2  # Set the Terraform version to 1.8.2

      - name: Initialize Terraform to Extract Variables
        id: init
        working-directory: ./main
        run: terraform init  # Initialize Terraform to prepare for retrieving variables

      - name: Create backend.tf
        run: |
          cat <<EOF > ./main/backend.tf
          terraform {
            backend "s3" {
              bucket = "${{ secrets.BUCKET_TF_STATE }}"
              key    = "terraform/python-master-project.tfstate"
              region = "${{ secrets.BACKEND_REGION }}"
            }
          }
          EOF

      - name: Terraform init with backend
        working-directory: ./main
        run: terraform init  # Initialize Terraform with the S3 backend configuration

      - name: Terraform format check
        id: fmt-check
        working-directory: ./main
        run: terraform fmt -check  # Check if the Terraform code is formatted correctly
        continue-on-error: true  # Allow the workflow to continue even if the format check fails

      - name: Automatically format Terraform code if not formatted
        if: steps.fmt-check.outcome == 'failure'
        working-directory: ./main
        run: terraform fmt  # Automatically format the Terraform code if the format check fails

      - name: Commit formatted code
        if: steps.fmt-check.outcome == 'failure'
        run: |
          git config --global user.name "GitHub Actions"  # Set Git username for the commit
          git config --global user.email "actions@github.com"  # Set Git email for the commit
          git add .  # Add all changes
          git commit -m "Automatically formatted Terraform code"  # Commit the formatted code
          git push origin HEAD:${{ github.head_ref }}  # Push the commit back to the branch

      - name: Trigger workflow again after formatting
        if: steps.fmt-check.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const githubToken = process.env.GITHUB_TOKEN;
            const octokit = new github.getOctokit(githubToken);

            await octokit.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: context.workflow,
              ref: context.ref,
            });  # Trigger the workflow again after the formatting changes are pushed

      - name: Terraform plan
        id: plan
        working-directory: ./main
        env:
          SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}  # Make the SHODAN_API_KEY available during plan
        run: terraform plan -no-color -input=false  # Generate the Terraform plan
        continue-on-error: true  # Allow the workflow to continue even if the plan fails

      - name: Post Plan Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"  # Capture the plan output
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt-check.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });  # Post a comment on the pull request with the Terraform plan output

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1  # Exit with an error if the Terraform plan fails
