name: "Terraform Plan"

on:
  push:
    paths:
      - 'main/**'
  pull_request:
    paths:
      - 'main/**'
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: ${{ secrets.BACKEND_REGION }}

jobs:
  terraform:
    if: github.repository == 'batzsalmassi/python-project'
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.2

      - name: Initialize Terraform to Extract Variables
        id: init
        working-directory: ./main
        run: terraform init

      - name: Create backend.tf
        run: |
          cat <<EOF > ./main/backend.tf
          terraform {
            backend "s3" {
              bucket = "${{ secrets.BUCKET_TF_STATE }}"
              key    = "terraform/python-master-project.tfstate"
              region = "${{ secrets.BACKEND_REGION }}"
            }
          }
          EOF

      - name: Terraform init with backend
        working-directory: ./main
        run: terraform init

      - name: Terraform format check
        id: fmt-check
        working-directory: ./main
        run: terraform fmt -check
        continue-on-error: true

      - name: Automatically format Terraform code if not formatted
        if: steps.fmt-check.outcome == 'failure'
        working-directory: ./main
        run: terraform fmt

      - name: Commit formatted code
        if: steps.fmt-check.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Automatically formatted Terraform code"
          git push origin HEAD:${GITHUB_REF##*/}

      - name: Trigger workflow again after formatting
        if: steps.fmt-check.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { github, context } = require('@actions/github');
            const octokit = github.getOctokit(core.getInput('github-token'));

            await octokit.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: '<YOUR-WORKFLOW-FILENAME>.yml',
              ref: context.ref
            });

      - name: Terraform plan
        id: plan
        working-directory: ./main
        env:
          SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}
        run: |
          terraform plan -no-color -input=false -var "shodan_api_key=${{ secrets.SHODAN_API_KEY }}" | tee plan_output.txt
        continue-on-error: true

      - name: Read Terraform Plan Output
        id: read_plan
        run: echo "PLAN_OUTPUT=$(<plan_output.txt)" >> $GITHUB_ENV

      - name: Post Plan Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt-check.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`
            ${process.env.PLAN_OUTPUT}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            const octokit = github.getOctokit(core.getInput('github-token'));
            await octokit.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
