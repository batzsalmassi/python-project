name: "Terraform Plan and Apply"

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    paths:
      - 'main/**'
  push:
    branches:
      - main
  workflow_dispatch:

env:
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: ${{ secrets.BACKEND_REGION }}

jobs:
  terraform:
    if: github.repository == 'batzsalmassi/python-project'
    name: "Terraform Plan and Apply"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CLOUDGURU_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CLOUDGURU_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        id: init
        working-directory: ./main
        run: terraform init

      - name: Create backend.tf
        run: |
          cat <<EOF > ./main/backend.tf
          terraform {
            backend "s3" {
              bucket = "${{ secrets.BUCKET_TF_STATE }}"
              key    = "terraform/python-master-project.tfstate"
              region = "${{ env.AWS_REGION }}"
            }
          }
          EOF

      - name: Terraform init with backend
        working-directory: ./main
        run: terraform init

      - name: Terraform format check
        id: fmt-check
        working-directory: ./main
        run: terraform fmt -check
        continue-on-error: true

      - name: Automatically format Terraform code if not formatted
        if: steps.fmt-check.outcome == 'failure'
        working-directory: ./main
        run: terraform fmt

      - name: Commit formatted code
        if: steps.fmt-check.outcome == 'failure' && github.event_name == 'pull_request'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git checkout ${{ github.head_ref }}
          git add .
          git diff --staged --quiet || (git commit -m "Automatically formatted Terraform code" && git push origin ${{ github.head_ref }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform plan
        id: plan
        working-directory: ./main
        env:
          SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}
          TF_VAR_personal_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_personal_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform plan -no-color -input=false \
            -var "shodan_api_key=$SHODAN_API_KEY" \
            -var "personal_aws_access_key=$TF_VAR_personal_aws_access_key" \
            -var "personal_aws_secret_key=$TF_VAR_personal_aws_secret_key" \
            -out=tfplan

      - name: Show Terraform Plan
        run: |
          if [ -f tfplan ]; then
            terraform show -no-color tfplan | sed 's/\(access_key\|secret_key\|api_key\).*= "[^"]*"/\1 = <redacted>/g' > redacted_plan.txt
            if grep -qE '(AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY)' redacted_plan.txt; then
              echo "Error: Sensitive information detected in plan output" > redacted_plan.txt
            elif [ ! -s redacted_plan.txt ]; then
              echo "No changes detected in the plan" > redacted_plan.txt
            fi
          else
            echo "No tfplan file found" > redacted_plan.txt
          fi

      - name: Summarize Terraform Plan
        id: plan_summary
        run: |
          if [ -f redacted_plan.txt ]; then
            if grep -q "No changes detected in the plan" redacted_plan.txt; then
              echo "SUMMARY=No changes detected" >> $GITHUB_OUTPUT
            elif grep -q "No tfplan file found" redacted_plan.txt; then
              echo "SUMMARY=Error: No Terraform plan file found" >> $GITHUB_OUTPUT
            else
              RESOURCES_ADDED=$(grep -c '^\s*\+ ' redacted_plan.txt || echo "0")
              RESOURCES_CHANGED=$(grep -c '^\s*~ ' redacted_plan.txt || echo "0")
              RESOURCES_DESTROYED=$(grep -c '^\s*- ' redacted_plan.txt || echo "0")
              echo "SUMMARY=Resources to add: $RESOURCES_ADDED, change: $RESOURCES_CHANGED, destroy: $RESOURCES_DESTROYED" >> $GITHUB_OUTPUT
            fi
          else
            echo "SUMMARY=Error: redacted_plan.txt not found" >> $GITHUB_OUTPUT
          fi

      - name: Post Plan Summary Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN_SUMMARY: ${{ steps.plan_summary.outputs.SUMMARY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('redacted_plan.txt', 'utf8');
            const output = `#### Terraform Plan Summary
            ${{ env.PLAN_SUMMARY }}
            
            <details><summary>Show Redacted Plan</summary>
            
            \`\`\`hcl
            ${planOutput}
            \`\`\`
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Save Terraform Plan
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v2
        with:
          name: terraform-plan
          path: ./main/tfplan

      - name: Download Terraform Plan
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
        uses: actions/download-artifact@v2
        with:
          name: terraform-plan
          path: ./main

      - name: Terraform Apply
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
        working-directory: ./main
        env:
          SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}
          TF_VAR_personal_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_personal_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve -input=false tfplan

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
