name: "Terraform Plan and Apply"

on:
  pull_request:
    paths:
      - 'main/**'
  workflow_dispatch:

env:
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: ${{ secrets.BACKEND_REGION }}

jobs:
  terraform:
    if: github.repository == 'batzsalmassi/python-project'
    name: "Terraform Plan and Apply"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      - name: Configure AWS Credentials for CloudGuru
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CLOUDGURU_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CLOUDGURU_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        id: init
        working-directory: ./main
        run: terraform init

      - name: Create backend.tf
        run: |
          cat <<EOF > ./main/backend.tf
          terraform {
            backend "s3" {
              bucket = "${{ secrets.BUCKET_TF_STATE }}"
              key    = "terraform/python-master-project.tfstate"
              region = "${{ env.AWS_REGION }}"
            }
          }
          EOF

      - name: Terraform init with backend
        working-directory: ./main
        run: terraform init

      - name: Terraform format check
        id: fmt-check
        working-directory: ./main
        run: terraform fmt -check
        continue-on-error: true

      - name: Automatically format Terraform code if not formatted
        if: steps.fmt-check.outcome == 'failure'
        working-directory: ./main
        run: terraform fmt

      - name: Commit formatted code
        if: steps.fmt-check.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git diff --staged --quiet || (git commit -m "Automatically formatted Terraform code" && git push origin HEAD:${GITHUB_REF##*/})

      - name: Terraform plan
        id: plan
        working-directory: ./main
        env:
          SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}
          TF_VAR_personal_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_personal_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform plan -no-color -input=false \
            -var "shodan_api_key=$SHODAN_API_KEY" \
            -var "personal_aws_access_key=$TF_VAR_personal_aws_access_key" \
            -var "personal_aws_secret_key=$TF_VAR_personal_aws_secret_key" \
            | grep -v "Refreshing state..." \
            | grep -v "aws_access_key" \
            | grep -v "aws_secret_key" \
            | grep -v "api_key" \
            > plan_output.txt

      - name: Summarize Terraform Plan
        id: plan_summary
        run: |
          RESOURCES_ADDED=$(grep -c '^\s*\+ ' main/plan_output.txt || echo "0")
          RESOURCES_CHANGED=$(grep -c '^\s*~ ' main/plan_output.txt || echo "0")
          RESOURCES_DESTROYED=$(grep -c '^\s*- ' main/plan_output.txt || echo "0")
          echo "SUMMARY=Resources to add: $RESOURCES_ADDED, change: $RESOURCES_CHANGED, destroy: $RESOURCES_DESTROYED" >> $GITHUB_OUTPUT

      - name: Post Plan Summary Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN_SUMMARY: ${{ steps.plan_summary.outputs.SUMMARY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan Summary
            ${{ env.PLAN_SUMMARY }}
            
            For security reasons, the full plan output is not displayed. Please review the changes carefully.
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./main
        env:
          SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}
          TF_VAR_personal_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_personal_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve -input=false \
            -var "shodan_api_key=$SHODAN_API_KEY" \
            -var "personal_aws_access_key=$TF_VAR_personal_aws_access_key" \
            -var "personal_aws_secret_key=$TF_VAR_personal_aws_secret_key"

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
